struct node  // define struct variable type for nodes to build maze
{
  int distance;
  int section;
  
  int row;
  int column;
  
  bool traveled_to;
  
  struct node* up;
  struct node* down;
  struct node* left;
  struct node* right;
};



void initialize_map(struct node maze[16][16])  // function to initialize maze
{
  int i, j, reference;

  
  for(i = 0; i < 16; i++)
  {
    for(j = 0; j < 16; j++)
    {
      maze[i][j].traveled_to = false;  // mark all nodes as having not been traveled to
      
      maze[i][j].row = j;
      
      maze[i][j].column = i;
      
      if(i <= 6 && j <=6)  // assign every node to a fundamental maze section
      {
        maze[i][j].section = 1;
      }
      
      else if(i <= 6 && j <= 7)
      {
        maze[i][j].section = 2;
      }
      
      else if(i <= 6 && j <= 8)
      {
        maze[i][j].section = 3;
      }
      
      else if(i <= 6 && j <= 15)
      {
        maze[i][j].section = 4;
      }
      
      else if(i <= 7 && j <= 6)
      { 
        maze[i][j].section = 5;
      }
      
      else if(i <= 7 && j <= 7)
      {
        maze[i][j].section = 0;
      }
      
      else if(i <= 7 && j <= 15)
      {
        maze[i][j].section = 6;
      }
      
      else if(i <= 8 && j <= 6)
      {
        maze[i][j].section = 7;
      }
      
      else if(i <= 8 && j <= 8)
      {
        maze[i][j].section = 0;
      }
      
      else if(i <= 8 && j <= 15)
      {
        maze[i][j].section = 8;
      }
      
      else if(j <= 6)
      {
        maze[i][j].section = 9;
      }
      
      else if(j <= 7)
      {
        maze[i][j].section = 10;
      }
      
      else if(j <= 8)
      {
        maze[i][j].section = 11;
      }
      
      else maze[i][j].section = 12;
      
      if(i > 0)  // link node to the node left of it
      {
        maze[i][j].left = &maze[i-1][j];
      }
      
      else maze[i][j].left = 0;
      
      if(j > 0)  // link node to the node below it
      {
        maze[i][j].down = &maze[i][j-1];
      }
      
      else maze[i][j].down = 0;
      
      if(j < 15)  // link node to the node above it
      {
        maze[i][j].up = &maze[i][j+1];
      }
      
      else maze[i][j].up = 0;
      
      if(i < 15)  // link node to the node right of it
      {
        maze[i][j].right = &maze[i+1][j];
      }
      
      else maze[i][j].right = 0;
    }
  }
  
  for(reference = 0; reference < 8; reference++)  // assign a distance from the center to every node
  {
    for(i = reference; i < 15 - reference; i++)
    {
      maze[reference][i].distance = (7 - reference);
    }
    
    for(j = reference; j < 15 - reference; j++)
    {
      maze[j][i].distance = (7 - reference);
    }
    
    for(; i > reference; i--)
    {
      maze[j][i].distance = (7 - reference);
    }
    
    for(; j > reference; j--)
    {
      maze[j][i].distance = (7 - reference);
    }
  }
  
}
